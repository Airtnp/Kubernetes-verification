(declare-fun dst () (_ BitVec 4))
(declare-fun src () (_ BitVec 4))
(declare-rel role__exists ((_ BitVec 4)))
(declare-rel l__namespace__exists ((_ BitVec 1)))
(declare-rel nonsense__namespace__exists ((_ BitVec 1)))
(declare-rel egress_traffic ((_ BitVec 4) (_ BitVec 4)))
(declare-rel ingress_traffic ((_ BitVec 4) (_ BitVec 4)))
(declare-rel env__exists ((_ BitVec 4)))
(declare-rel role ((_ BitVec 4) (_ BitVec 32)))
(declare-rel egress_allow_0_role_in_pod ((_ BitVec 4)))
(declare-rel selected_by_pol ((_ BitVec 4) (_ BitVec 1)))
(declare-rel nonsense ((_ BitVec 1) (_ BitVec 32)))
(declare-rel egress_allow_by_pol ((_ BitVec 4) (_ BitVec 1)))
(declare-rel namespace ((_ BitVec 4) (_ BitVec 1)))
(declare-rel ingress_allow_by_pol ((_ BitVec 4) (_ BitVec 1)))
(declare-rel have_path ((_ BitVec 4) (_ BitVec 4)))
(declare-rel env ((_ BitVec 4) (_ BitVec 32)))
(declare-rel l ((_ BitVec 1) (_ BitVec 32)))
(declare-var A (_ BitVec 1))
(declare-var B (_ BitVec 4))
(declare-var C (_ BitVec 4))
(declare-var D (_ BitVec 4))
(declare-var E (_ BitVec 4))
(declare-var F (_ BitVec 1))
(declare-var G (_ BitVec 4))
(declare-var H (_ BitVec 4))
(declare-var I (_ BitVec 1))
(declare-var J (_ BitVec 4))
(rule (ingress_traffic B B))
(rule (=> (and (selected_by_pol B A) (ingress_allow_by_pol D A))
    (ingress_traffic D B)))
(rule (=> (and (selected_by_pol B A) (egress_allow_by_pol C A)) (egress_traffic C B)))
(rule (=> (and (ingress_traffic D B) (egress_traffic C B)) (have_path D C)))
(rule (namespace #x0 #b0))
(rule (env #x0 #x00000000))
(rule (env__exists #x0))
(rule (role #x0 #x00000001))
(rule (role__exists #x0))
(rule (namespace #x1 #b0))
(rule (env #x1 #x00000002))
(rule (env__exists #x1))
(rule (role #x1 #x00000001))
(rule (role__exists #x1))
(rule (namespace #x2 #b1))
(rule (env #x2 #x00000000))
(rule (env__exists #x2))
(rule (role #x2 #x00000001))
(rule (role__exists #x2))
(rule (namespace #x3 #b1))
(rule (env #x3 #x00000002))
(rule (env__exists #x3))
(rule (role #x3 #x00000001))
(rule (role__exists #x3))
(rule (namespace #x4 #b0))
(rule (env #x4 #x00000000))
(rule (env__exists #x4))
(rule (role #x4 #x00000003))
(rule (role__exists #x4))
(rule (namespace #x5 #b0))
(rule (env #x5 #x00000002))
(rule (env__exists #x5))
(rule (role #x5 #x00000003))
(rule (role__exists #x5))
(rule (namespace #x6 #b1))
(rule (env #x6 #x00000000))
(rule (env__exists #x6))
(rule (role #x6 #x00000003))
(rule (role__exists #x6))
(rule (namespace #x7 #b1))
(rule (env #x7 #x00000002))
(rule (env__exists #x7))
(rule (role #x7 #x00000003))
(rule (role__exists #x7))
(rule (namespace #x8 #b0))
(rule (env #x8 #x00000000))
(rule (env__exists #x8))
(rule (role #x8 #x00000004))
(rule (role__exists #x8))
(rule (namespace #x9 #b0))
(rule (env #x9 #x00000002))
(rule (env__exists #x9))
(rule (role #x9 #x00000004))
(rule (role__exists #x9))
(rule (namespace #xa #b1))
(rule (env #xa #x00000000))
(rule (env__exists #xa))
(rule (role #xa #x00000004))
(rule (role__exists #xa))
(rule (namespace #xb #b1))
(rule (env #xb #x00000002))
(rule (env__exists #xb))
(rule (role #xb #x00000004))
(rule (role__exists #xb))
(rule (namespace #xc #b0))
(rule (env #xc #x00000000))
(rule (env__exists #xc))
(rule (role #xc #x00000005))
(rule (role__exists #xc))
(rule (namespace #xd #b0))
(rule (env #xd #x00000002))
(rule (env__exists #xd))
(rule (role #xd #x00000005))
(rule (role__exists #xd))
(rule (namespace #xe #b1))
(rule (env #xe #x00000000))
(rule (env__exists #xe))
(rule (role #xe #x00000005))
(rule (role__exists #xe))
(rule (namespace #xf #b1))
(rule (env #xf #x00000002))
(rule (env__exists #xf))
(rule (role #xf #x00000005))
(rule (role__exists #xf))
(rule (nonsense #b0 #x00000006))
(rule (nonsense__namespace__exists #b0))
(rule (nonsense #b1 #x00000007))
(rule (nonsense__namespace__exists #b1))
(rule (l #b1 #x00000008))
(rule (l__namespace__exists #b1))
(rule (=> (and (namespace B #b0) (role B #x00000001)) (selected_by_pol B #b0)))
(rule (=> (and (role B #x00000001)) (egress_allow_0_role_in_pod B)))
(rule (=> (and (role B #x00000003)) (egress_allow_0_role_in_pod B)))
(rule (=> (and (namespace C A)
         (l__namespace__exists A)
         (egress_allow_0_role_in_pod C))
    (egress_allow_by_pol C #b0)))
(rule (=> (and (namespace B A) (nonsense A #x00000006) (role B #x00000004))
    (ingress_allow_by_pol B #b0)))
(declare-rel q!!0 ())
(assert (=> (egress_traffic src dst) q!!0))
(query q!!0)
